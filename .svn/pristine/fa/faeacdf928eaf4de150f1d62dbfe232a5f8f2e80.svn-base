package cn.smartcandy.common.filter;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import cn.smartcandy.common.common.SessionKeys;
import cn.smartcandy.common.utils.TMemberUtils;
import cn.smartcandy.framework.utils.CStringUtils;

/**
 * @项目名称：zmjema
 * @类名称：ManagerAuthorFilter
 * @类描述：权限管理过滤器
 * @创建人：tangzhifeng
 * @创建时间：2017年10月24日 下午12:05:13
 * @修改人：someOne
 * @修改时间：2017年10月24日 下午12:05:13 
 * @Company:SmartCandy (C) 2017
 * @version 1.0
 */
public class ManagerAuthorFilter implements Filter {
	 public FilterConfig config;

	@Override
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
			throws IOException, ServletException {
		HttpServletRequest request = (HttpServletRequest) req;
		HttpServletResponse response = (HttpServletResponse) res;
		HttpSession session = request.getSession();
		
		String ingoreURL = CStringUtils.replaceBlank(config.getInitParameter("ingoreURL")); // 登录登陆页面
		String includeStrings = config.getInitParameter("includeStrings"); // 过滤资源后缀参数
		String redirectPath = request.getContextPath() + config.getInitParameter("redirectPath");// 没有登陆转向页面
		String disabletestfilter = config.getInitParameter("disabletestfilter");// 过滤器是否有效
		
        if (null != request) {
			//System.out.println("-------------过滤器："+request.getRequestURI());
		}
		if (disabletestfilter.toUpperCase().equals("N")) {    //过滤开发
            chain.doFilter(request, response);
            return;
        }
        String[] ignoreList = ingoreURL.split(";");
        String[] includeList = includeStrings.split(";");

        // 要过滤的后缀
        if (!ManagerAuthorFilter.isContains(request.getRequestURI(), includeList)) {// 只对指定过滤参数后缀进行过滤
            chain.doFilter(request, response);
            return;
        }

        // 不过滤的页面
        if (ManagerAuthorFilter.isContains(request.getRequestURI(), ignoreList) && request.getRequestURI().indexOf("/admin/index.html")<0 ) {// 对登录页面不进行过滤
            chain.doFilter(request, response);
            return;
        }

		// 取出当前登录用户
		Object userObject = session.getAttribute(SessionKeys.LOGIN_USER);
		if (TMemberUtils.isAdmin(userObject)) {
			System.out.println("当前用户已经登录，登录级别：超级管理员");
            chain.doFilter(request, response);
            return;
		}else if (TMemberUtils.isUser(userObject)) {
			System.out.println("当前用户已经登录，登录级别：普通用户");
            chain.doFilter(request, response);
            return;
		}else {
			System.out.println("当前用户没有登录，登录级别：游客身份"+redirectPath+"----------"+request.getRequestURI());
			response.sendRedirect(redirectPath);
            return;
		}
		
		/*else if (TMemberUtils.isUser(userObject)) {
			System.out.println("当前用户已经登录，登录级别：普通用户");
            chain.doFilter(request, response);
            return;
		}*/
	}

	@Override
	public void destroy() {
		this.config = null;
	}
	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		config = filterConfig;
	}
	
	public static boolean isContains(String container, String[] regx) {
        boolean result = false;
        for (int i = 0; i < regx.length; i++) {
            if (container.indexOf(regx[i]) != -1) {
                return true;
            }
        }
        return result;
    }
	
	
}
